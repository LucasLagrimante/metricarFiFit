/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import Enum.TipoCardinalidade;
import Enum.TipoLigacao;
import Storage.Diagrama;
import Storage.Helper;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import model.Classe;
import model.Ligacao;

/**
 *
 * @author Lucas Lagrimante
 */
public class main extends javax.swing.JFrame {

    int temp;
    Helper helper = new Helper();
    String lower, upper;
    TipoCardinalidade tipoCardinalidade;

    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbAbrir = new javax.swing.JButton();
        jlCreditos = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbAbrir.setText("Abrir Diagrama XML");
        jbAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbrirActionPerformed(evt);
            }
        });

        jlCreditos.setText("Desenvolvido por Lucas Lagrimante e Leonardo Smoginski");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jlCreditos)
                .addGap(68, 68, 68))
            .addGroup(layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jbAbrir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jbAbrir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(jlCreditos))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbrirActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Filtro .xml", "xml"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.showOpenDialog(this);

        File xmlFileLer = new File(fileChooser.getSelectedFile().getName());

        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder;
            dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xmlFileLer);
            doc.getDocumentElement().normalize();

            System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

            NodeList listaClasses = doc.getElementsByTagName("packagedElement");

            System.out.println("----------------------------");

            // lista as classes
            for (temp = 1; temp < listaClasses.getLength(); temp++) {
                Node nodeClasse = listaClasses.item(temp);
                if (nodeClasse.getNodeType() == Node.ELEMENT_NODE) {
                    Element paiElement = (Element) nodeClasse;
                    Classe classe = new Classe(paiElement.getAttribute("xmi:id"), paiElement.getAttribute("name"));
                    Diagrama.addClasse(classe);
                }
            }

            for (temp = 1; temp < listaClasses.getLength(); temp++) {
                Node nodeClasse = listaClasses.item(temp);
                Element paiElement = (Element) nodeClasse;
                //pega os filhos das classes
                NodeList filhos = helper.getFilhos(paiElement);
                //lista os filhos primarios
                for (temp = 0; temp < filhos.getLength(); temp++) {
                    Node nodeFilho = filhos.item(temp);
                    if (nodeClasse.getNodeType() == Node.ELEMENT_NODE) {
                        Element filhoElement = (Element) nodeFilho;
                        //filho pode ser associacao ou generalizacao
                        if (filhoElement.getAttribute("xmi:type").equals(TipoLigacao.Association.getTipoLigacao())) {
                            //descer mais um nivel e buscar lower e upper value
                            NodeList netos = helper.getFilhos(filhoElement);
                            for (temp = 0; temp < netos.getLength(); temp++) {
                                //filhos do ownedMember = ownedEnd
                                Node nodeNeto = netos.item(temp);
                                Element netoElement = (Element) nodeNeto;
                                if (nodeNeto.getNodeType() == Node.ELEMENT_NODE) {
                                    //nodes lower upper value
                                    NodeList tataranetos = helper.getFilhos(nodeNeto);
                                    for (temp = 0; temp < tataranetos.getLength(); temp++) {
                                        Node nodeTataraneto = netos.item(temp);
                                        Element tataranetoElement = (Element) nodeTataraneto;
                                        if (nodeTataraneto.getNodeType() == Node.ELEMENT_NODE) {

                                            if (tataranetoElement.getNodeName().equals("lowerValue")) {
                                                lower = tataranetoElement.getAttribute("value");
                                            } else if (tataranetoElement.getNodeName().equals("upperValue")) {
                                                upper = tataranetoElement.getAttribute("value");
                                            }

                                        }
                                    }
                                    if (lower.equals("0") || upper.equals("1")) {
                                        tipoCardinalidade = TipoCardinalidade.ZEROUM;
                                    } else if (lower.equals("1") || upper.equals("1")) {
                                        tipoCardinalidade = TipoCardinalidade.UM;
                                    } else if (lower.equals("0") || upper.equals("*")) {
                                        tipoCardinalidade = TipoCardinalidade.ZEROMUITOS;
                                    } else if (lower.equals("1") || upper.equals("*")) {
                                        tipoCardinalidade = TipoCardinalidade.UMMUITOS;
                                    } else if (lower.equals("*") || upper.equals("*")) {
                                        tipoCardinalidade = TipoCardinalidade.MUITOS;
                                    }
                                    Ligacao ligacao = new Ligacao(netoElement.getAttribute("xmi:id"), Diagrama.getClassePorId(paiElement.getAttribute("xmi:id")), tipoCardinalidade, TipoLigacao.Association);
                                    Diagrama.addLigacao(ligacao);
                                }
                            }
                            //filho pode ser associacao ou generalizacao
                        } else if (filhoElement.getNodeName().equals(TipoLigacao.Generalization.getTipoLigacao())) {
                            Ligacao ligacao = new Ligacao(filhoElement.getAttribute("xmi:id"), Diagrama.getClassePorId(filhoElement.getAttribute("specific")), Diagrama.getClassePorId(filhoElement.getAttribute("general")), TipoLigacao.Generalization);
                            Diagrama.addLigacao(ligacao);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jbAbrirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAbrir;
    private javax.swing.JLabel jlCreditos;
    // End of variables declaration//GEN-END:variables
}
